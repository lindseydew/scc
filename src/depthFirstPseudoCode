public class Graph {
â€¦

enum VertexState {
          White, Gray, Black
      }

      public void DFS()
      {
            VertexState state[] = new VertexState[vertexCount];
            for (int i = 0; i < vertexCount; i++)
                  state[i] = VertexState.White;
            runDFS(0, state);
      }

      public void runDFS(int u, VertexState[] state)
      {
            state[u] = VertexState.Gray;
            for (int v = 0; v < vertexCount; v++)
                  if (isEdge(u, v) && state[v] == VertexState.White)
                        runDFS(v, state);
            state[u] = VertexState.Black;
      }
}



Algorithm: depthFirstMatrix (adjMatrix, n)
Input: A graph's adjacency matrix, number of vertices n.

     // Visit order will start with "0", so initialize to -1.
1.   for i=0 to n-1
2.       visitOrder[i] = -1
3.   endfor

     // A counter for the order:
4.   visitCount = -1

     // Look for an unvisited vertex and explore its tree.
     // We need this because the graph may have multiple components.
5.   for i=0 to n-1
6.       if visitOrder[i] < 0
7.         depthFirstMatrixRecursive (i)
8.       endif
9.   endfor